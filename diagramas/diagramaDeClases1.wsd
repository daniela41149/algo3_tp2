@startuml
Juego "1" *-- "*" TarjetaPais
Juego "1" *-- "*" TarjetaObjetivo
Juego ..> Moderador
Aleatorio <..Juego

skinparam classAttributeIconSize 0
class Moderador {
 +pedirPaises(): ListaPaises
 +pedirContinentes(): ListaContinentes
 +pedirTarjetasPais(): ListaTarjetasPais
 +pedirTarjetasObjetivo(): ListaTarjetasObjetivo
}

skinparam classAttributeIconSize 0
class Aleatorio {
 +repartirPaisesAleatoriamente(int cantidadJugadores, listaPaises): listaDeListaDePaises
 +elegirPosicionDelJugadorQueEmpieza(int cantidadJugadores): int posicion
 +agarrarTajetaPaisAleatoriaDelMazo(ListaTarjetasPais)
 +agarrarTajetaObjetivoAleatoriaDelMazo(ListaTarjetasObjetivo)
}


skinparam classAttributeIconSize 0
class Juego {
 -tablero: Tablero
 -jugadores: listaJugador
 -posicionJugadorEnTurno: int
 -ejercitosColocadosPorJugadorEnTurno: int
 +new (listaPaises, listaContinentes, listaNombresJugadores): Juego
 +guardarMazoDeTarjetasPais(listaTarjetasPais)
 +guardarMazoDeTarjetasObjetivo(listaTarjetasObjetivo)
 +comenzarFaseInicial (Aleatorio)
 +pasarTurno()
 +colocarEjercitoPrimeraVuelta(nombresDePaises, cantidadEjercitosPorPais)
 +colocarEjercitoSegundaVuelta(nombresDePaises, cantidadEjercitosPorPais)
 +colocarEjercito (String nombrePais, int cantidadEjercito)
 +atacar (String paisAtacante, String paisDefensor, int cantidadEjercito)
 +devolverJugadores(): listaJugadores
 +jugadorDeColorOSiguiente(String colorBuscado, Jugador): Jugador
 +cumplioObjetivo(Jugador jugador): boolean
 +reagrupar(String nombrePaisDesde, String nombrePaisHasta, int cantidadDeEjercito)
 +entregaTarjetaPais(): TarjetaPais
 +devolverTarjetasAlMazo(ListaTarjetasPais)

}

skinparam classAttributeIconSize 0
abstract class TarjetaObjetivo {

}
@enduml